// MorphInjectorProperties.cs created by Iron Wolf for Pawnmorph on 09/13/2021 7:34 AM
// last updated 09/13/2021  7:34 AM

using System.Collections.Generic;
using JetBrains.Annotations;
using Pawnmorph.Composable.Hediffs;
using Pawnmorph.Hediffs.Composable;
using RimWorld;
using UnityEngine;
using Verse;

namespace Pawnmorph
{
    /// <summary>
    ///     properties for dynamically generated injectors generated by <see cref="MorphDef" />
    /// </summary>
    public class MorphInjectorProperties
    {
        private const string DEFAULT_TRADER_TAG = "ExoticMisc";
        public List<StatModifier> statBases;
        public TechLevel techLevel = TechLevel.Industrial;
        public List<string> traderTags;
        public bool useDefaultTags = true;
        public List<ThingDefCountClass> costList;
        public int slurryCost;
        public int neutroamineCost;
        public int mutaniteCost;

        public RecipeMakerProperties recipeMaker;

        public GraphicData graphicData;

        /// <summary>
        ///     gets all configuration errors with this instance.
        /// </summary>
        /// <returns></returns>
        public IEnumerable<string> ConfigErrors()
        {
            yield break;
        }

        /// <summary>
        ///     Resolves the references.
        /// </summary>
        public void ResolveReferences()
        {
            if (useDefaultTags)
            {
                traderTags = traderTags ?? new List<string>();
                if (!traderTags.Contains(DEFAULT_TRADER_TAG))
                    traderTags.Add(DEFAULT_TRADER_TAG);
            }

            if (costList == null)
            {
                costList = new List<ThingDefCountClass>();
                if (slurryCost > 0) costList.Add(new ThingDefCountClass(PMThingDefOf.MechaniteSlurry, slurryCost));

                if (neutroamineCost > 0) costList.Add(new ThingDefCountClass(PMThingDefOf.Neutroamine, neutroamineCost));

                if (mutaniteCost > 0) costList.Add(new ThingDefCountClass(PMThingDefOf.Mutanite, mutaniteCost));
                //TODO generate market value 
            }


            if (graphicData == null)
                graphicData = new GraphicData
                {
                    texPath = "Things/Item/Drug/Specific",
                    graphicClass = typeof(Graphic_Single)
                };
        }
    }

    /// <summary>
    ///     properties for dynamically generated morph hediffs
    /// </summary>
    public class MorphHediffProperties
    {
        /// <summary>
        ///     The label color of the injector hediff
        /// </summary>
        public Color labelColor = new Color(0.3f, .26f, .71f);

        /// <summary>
        ///     The mutagen to use
        /// </summary>
        [CanBeNull] public MutagenDef mutagen;

        /// <summary>
        ///     The tf alert, if null no alert stage will be generated
        /// </summary>
        [CanBeNull] public StageAlert tfAlert;

        /// <summary>
        ///     The chance for this hediff to remove a non morph part chance
        /// </summary>
        public float removeNonMorphPartChance;

        /// <summary>
        ///     The tf settings to use, if null no tf stage will be generated
        /// </summary>
        [CanBeNull] public TFMiscSettings tfSettings;

        /// <summary>
        ///     The hunger rate factor
        /// </summary>
        public float hungerRateFactor;

        /// <summary>
        ///     The cap mods to use
        /// </summary>
        [CanBeNull] public List<PawnCapacityModifier> capMods;
    }
}